||	[||]
argFunctionR	[,]
<=	[<=]
decl	[const, int, float]
constInitVal	[+, -, !, Ident, (, INT, FLOAT]
constDef	[Ident]
compUnit	[const, void, int, float]
addExp	[+, -, !, Ident, (, INT, FLOAT]
unaryOp	[+, -, !]
program	[const, void, int, float]
float	[float]
cond	[+, -, !, Ident, (, INT, FLOAT]
addExpAtom	[+, -]
mulExpAtom	[*, /, %]
relExp	[+, -, !, Ident, (, INT, FLOAT]
argVarDecl	[,]
number	[INT, FLOAT]
eqExp	[+, -, !, Ident, (, INT, FLOAT]
else	[else]
funcFParams	[int, float]
block	[{]
lAndExp	[+, -, !, Ident, (, INT, FLOAT]
mulExp	[+, -, !, Ident, (, INT, FLOAT]
argExp	[+, -, !, Ident, (, INT, FLOAT]
exp	[+, -, !, Ident, (, INT, FLOAT]
if	[if]
constExp	[+, -, !, Ident, (, INT, FLOAT]
==	[==]
!	[!]
void	[void]
assignExp	[+, -, !, Ident, (, INT, FLOAT]
%	[%]
elsePart	[else]
lVal	[Ident]
(	[(]
)	[)]
*	[*]
assignExpAtom	[=]
+	[+]
,	[,]
-	[-]
/	[/]
bType	[int, float]
unaryExp	[+, -, !, Ident, (, INT, FLOAT]
varDef	[Ident]
primaryExp	[(, INT, FLOAT]
;	[;]
blockItem	[const, ;, {, if, return, int, float, +, -, !, Ident, (, INT, FLOAT]
<	[<]
!=	[!=]
=	[=]
>	[>]
>=	[>=]
funcDef	[void]
&&	[&&]
FLOAT	[FLOAT]
eqExpAtom	[==, !=]
const	[const]
funcRParam	[+, -, !, Ident, (, INT, FLOAT]
INT	[INT]
funcRParams	[+, -, !, Ident, (, INT, FLOAT]
initVal	[+, -, !, Ident, (, INT, FLOAT]
argConst	[,]
lAndExpAtom	[&&]
funcType	[void]
lOrExpAtom	[||]
Ident	[Ident]
relExpAtom	[<, >, <=, >=]
constDecl	[const]
callFunc	[(]
int	[int]
ifStmt	[{]
argVarDef	[=]
funcFParam	[int, float]
lOrExp	[+, -, !, Ident, (, INT, FLOAT]
{	[{]
argFunctionF	[,]
}	[}]
varDecl	[int, float]
return	[return]
stmt	[;, {, if, return, +, -, !, Ident, (, INT, FLOAT]
