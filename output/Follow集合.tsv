argFunctionR	[), #]
decl	[const, void, int, float, ;, {, if, return, +, -, !, Ident, (, INT, FLOAT, }, #]
constInitVal	[,, ;, #]
constDef	[,, ;, #]
compUnit	[#]
addExp	[<, >, <=, >=, ==, !=, &&, =, ,, ;, ||, ), #]
unaryOp	[+, -, !, Ident, (, INT, FLOAT, #]
program	[#]
cond	[), #]
addExpAtom	[<, >, <=, >=, ==, !=, &&, =, ,, ;, ||, ), #]
mulExpAtom	[+, -, <, >, <=, >=, ==, !=, &&, =, ,, ;, ||, ), #]
relExp	[==, !=, &&, =, ,, ;, ||, ), #]
argVarDecl	[;, #]
number	[*, /, %, +, -, <, >, <=, >=, ==, !=, &&, =, ,, ;, ||, ), #]
eqExp	[&&, =, ,, ;, ||, ), #]
funcFParams	[), #]
block	[const, void, int, float, ;, {, if, return, +, -, !, Ident, (, INT, FLOAT, }, #]
lAndExp	[||, ), #]
mulExp	[+, -, <, >, <=, >=, ==, !=, &&, =, ,, ;, ||, ), #]
argExp	[;, #]
exp	[,, ;, ), #]
constExp	[,, ;, #]
assignExp	[,, ;, ), #]
elsePart	[const, ;, {, if, return, int, float, +, -, !, Ident, (, INT, FLOAT, }, #]
lVal	[#]
assignExpAtom	[,, ;, ), #]
bType	[Ident, #]
unaryExp	[*, /, %, +, -, <, >, <=, >=, ==, !=, &&, =, ,, ;, ||, ), #]
varDef	[,, ;, #]
primaryExp	[*, /, %, +, -, <, >, <=, >=, ==, !=, &&, =, ,, ;, ||, ), #]
blockItem	[}, #]
funcDef	[const, void, int, float, #]
eqExpAtom	[&&, =, ,, ;, ||, ), #]
funcRParam	[,, ), #]
funcRParams	[), #]
initVal	[,, ;, #]
argConst	[;, #]
lAndExpAtom	[||, ), #]
funcType	[Ident, #]
lOrExpAtom	[), #]
relExpAtom	[==, !=, &&, =, ,, ;, ||, ), #]
constDecl	[const, void, int, float, ;, {, if, return, +, -, !, Ident, (, INT, FLOAT, }, #]
callFunc	[*, /, %, +, -, <, >, <=, >=, ==, !=, &&, =, ,, ;, ||, ), #]
ifStmt	[const, ;, {, if, return, int, float, +, -, !, Ident, (, INT, FLOAT, }, #]
argVarDef	[,, ;, #]
funcFParam	[,, ), #]
lOrExp	[), #]
argFunctionF	[), #]
varDecl	[const, void, int, float, ;, {, if, return, +, -, !, Ident, (, INT, FLOAT, }, #]
stmt	[const, ;, {, if, return, int, float, +, -, !, Ident, (, INT, FLOAT, }, #]
